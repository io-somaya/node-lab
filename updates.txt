// const createUser = async (req, res) => {
//   const session = await mongoose.connection.startSession();
//   session.startTransaction();
//   try {
//     const data = req.body;
//     const User = await User.create(body);
//     res.status(201).json({ status: "success", data: { user } });
//   } catch (error) {
//     next(error);
//   } finally {
//     await session.abortTransaction();
//     session.endSession();

//   }
// };

const fs = require("fs").promises;
const APIError = require("../util/APIError");

const readUsers = async () => {
  const users = await fs.readFile("users.json", "utf-8");
  const parsedData = JSON.parse(users);
  return parsedData;
};

const writeUsers = async (users) => {
  const stringfiedUsers = JSON.stringify(users);
  await fs.writeFile("users.json", stringfiedUsers, "utf-8");
};

const getUsers = async (req, res, next) => {
  const users = await readUsers();
  res.status(200).json({ status: "success", data: { users: users } });
};

const createUser = async (req, res) => {
  const users = await readUsers();
  const newUser = req.body;
  users.push(newUser);
  await writeUsers(users);
  res.status(201).json({ status: "success", data: { user: newUser } });
};

const getUserById = async (req, res) => {
  const userId = parseInt(req.params.id);
  const users = await readUsers();
  const user = users.find((user) => user.id === userId);

  if (!user) {
    throw new APIError(`user with id: ${userId} is not found`, 404);
  }
  res.status(200).json({ status: "success", data: { user: user } });
};

const updateUserById = async (req, res) => {
  const userId = parseInt(req.params.id);
  const userData = req.body;
  const users = await readUsers();
  const index = users.findIndex((user) => {
    return user.id === userId;
  });
  if (index === -1) {
    throw new APIError(`user with id: ${userId} is not found`, 404);
  }
  users[index] = userData;
  await writeUsers(users);

  res.status(200).json({ status: "success", data: { user: users[index] } });
};
const deleteUserById = async (req, res) => {
  const userId = parseInt(req.params.id);
  const users = await readUsers();
  const index = users.findIndex((user) => {
    return user.id === userId;
  });
  if (index === -1) {
    throw new APIError(`user with id: ${userId} is not found`, 404);
  }
  const filteredUsers = users.filter((user) => user.id !== userId);
  await writeUsers(filteredUsers);
  res.status(204).json();
};

module.exports = {
  getUsers,
  createUser,
  getUserById,
  updateUserById,
  deleteUserById,
};
